# -*- encoding: utf-8 -*-
#
#  reader.py
#
#  Copyright 2017 Cody Schindler <cschindler@anasysinstruments.com>
#
#  This program is the property of Anasys Instruments, and may not be
#  redistributed or modified without explict permission of the author.

debug = True                         #debug flag
import xml.etree.ElementTree as ET   #for parsing XML
import gzip                          #for unzipping .axz files
import tkinter as tk                 #for file dialog boxes - probably replace with qt
from tkinter import filedialog       #see tkinter
if debug:
    import inspect                   #debugging module

import os
import sys

class AnasysFile():
    """Object for holding all data in a file generated by Analysis Studio"""
    def __init__(self, src_root):
        #set tag attributes as named python attributes
        for key, val in src_root.items():
            setattr(self, key, val)
        # for item in
    def __repr__(self):
        for attr in dir(self):
            print(attr)

class HeightMap():
    """Object for holding height map data"""
    def __init__(self):
        self.position = {
                        'X': 0,
                        'Y': 0,
                        'Z': 0
                        }

def get_extension(f_path):
    """Returns the extension of a file, given the file path"""
    ext = os.path.splitext(f_path)[1][1:].lower()
    return ext

def check_path(f_path):
    """Checks for errors with file existance and type"""
    todo("Throw an error and exit for two edge cases")
    if not os.path.isfile(f_path):
        print("Error: File path does not exist")
        todo("Throw an error and exit")
    if not (f_path.lower().endswith(".axz") or f_path.lower().endswith(".axd")):
        print("Error: File type must be .axz or .axd")
        todo("Throw an error and exit")

def read(f_name):
    """Main function for reading in data from axz or axd files and returns a python object"""
    #get complete file path
    f_path = os.path.abspath(f_name)
    #check that file is kosher
    check_path(f_path)
    #get the file extension
    ext = get_extension(f_path)
    #get the xml data from axz or axd
    if ext == 'axz':
        f_xml = open_axz(f_path)
    else:
        f_xml = open_axd(f_path)
    root = f_xml.root
    return AnasysFile(root)

def strip_namespace(f_data):
    """strips annoying xmlns data that elementTree auto-prepends to all element tags"""
    for _, el in f_data:
        el.tag = el.tag.split('}', 1)[1] #strip namespaces from tags
    return f_data

def open_axd(f_path):
    """Opens an axd file and returns its content as an ElementTree object"""
    f_data = ET.iterparse(f_path)
    f_data = strip_namespace(f_data)
    return f_data #returns an ET.iterparse object

def open_axz(f_path):
    """Opens an axz file and returns its content as an ElementTree object"""
    with gzip.open(f_path) as f:
        f_data = ET.iterparse(f)
        f_data = strip_namespace(f_data)
    return f_data #returns an ET.iterparse object

# print(ET.tostring(root, encoding="unicode", method="xml"))

# def load_file():
#     """Opens the 'Open' file dialogue box"""
#     f_names = tk.filedialog.askopenfilename( filetypes=( ("Anasys", "*.axz; *.axd"), ("All files", "*.*") ), multiple=True )
#     if f_names:
#         for f in f_names:
#             todo("load file")

def todo(message="Do something!"):
    """For debug only- creates console notes with line numbers"""
    def get_line_number():
        return inspect.currentframe().f_back.f_back.f_lineno
    def get_calling_function_name():
        return inspect.getframeinfo(inspect.currentframe().f_back.f_back).function
    if debug:
        complete_message = "TODO ({:4d}): {:.15}() - {}".format(get_line_number(), get_calling_function_name(), message)
        print(complete_message)
        with open("messages.txt", "w") as f1:
            f1.write(complete_message)
    else:
        pass

def main():
    r = read('Test/Test Data/TappingModeimage.axd')
    print(r)
    # print(r.items())
    # read('Test/Test Data/EmptyIRDoc.axz')
    # read('Test/Test Data/EmptyIRDoc.axd')
    #Test axz and axd output is the same
    # print(read('Test Data/EmptyIRDoc.axz') == read('Test Data/EmptyIRDoc.axd'))

if __name__ == '__main__':
    # import argparse
    main()
