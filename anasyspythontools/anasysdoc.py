# -*- encoding: utf-8 -*-
#
#  anasysdoc.py
#
#  Copyright 2017 Cody Schindler <cschindler@anasysinstruments.com>
#
#  This program is the property of Anasys Instruments, and may not be
#  redistributed or modified without explict permission of the author.

import xml.etree.ElementTree as ET
# from . import anasysfile
# from . import heightmap
# from . import irspectra
import anasysfile
import heightmap
import irspectra

class AnasysDoc(anasysfile.AnasysElement):
    """Object for holding document data in a file generated by Analysis Studio"""
    def __init__(self, ftree):
        self._skip_on_write = []
        self._special_write = {'Backgrounds': self._write_backgrounds,
                               'HeightMaps': self._write_height_maps,
                               'RenderedSpectra':self._write_rendered_spectra,
                               'SpectraChannelViews': self._write_spectral_channel_views}
        self._special_read = {'HeightMaps': self._read_height_maps,
                              'RenderedSpectra':self._read_rendered_spectra,
                              'Backgrounds': self._read_backgrounds,
                              'SpectraChannelViews': {}}
        anasysfile.AnasysElement.__init__(self, etree=ftree)

    def _read_rendered_spectra(self, spectra):
        spectradict = {}
        for spectrum in spectra:
            sp = irspectra.IRRenderedSpectra(spectrum)
            key = sp.Label
            key = self._check_key(key, spectradict)
            spectradict[key] = sp
        return spectradict

    def _read_height_maps(self, maps):
        """Takes an iterable of Height Maps, and returns a dict of HeightMap objects"""
        mapdict = {}
        for _map in maps:
            # self._attr_to_children(_map)
            new_map = heightmap.HeightMap(_map)
            key = new_map.Label
            key = self._check_key(key, mapdict)
            mapdict[key] = new_map
        return mapdict

    def _read_backgrounds(self, backgrounds):
        """Returns a list of the Background objects"""
        bgdict = {}
        for bg in backgrounds:
            new_bg = irspectra.Background(bg)
            key = new_bg.ID
            key = self._check_key(key, bgdict)
            bgdict[key] = new_bg
        return bgdict

    def _write_backgrounds(self, k, v):
        return ET.Element(k, text="WRITE CODE TO GO HERE")

    def _write_rendered_spectra(self, k, v):
        return ET.Element(k, text="WRITE CODE TO GO HERE")

    def _write_height_maps(self, k, v):
        return ET.Element(k, text="WRITE CODE TO GO HERE")

    def _write_spectral_channel_views(self, k, v):
        return ET.Element(k, text="WRITE CODE TO GO HERE")
