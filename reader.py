# -*- encoding: utf-8 -*-
#
#  reader.py
#
#  Copyright 2017 Cody Schindler <cschindler@anasysinstruments.com>
#
#  This program is the property of Anasys Instruments, and may not be
#  redistributed or modified without explict permission of the author.

debug = True                         #debug flag
import xml.etree.ElementTree as ET   #for parsing XML
import gzip                          #for unzipping .axz files
import tkinter as tk                 #for file dialog boxes - probably replace with qt
from tkinter import filedialog       #see tkinter
if debug:
    import inspect                   #debugging module

import os
import sys

class AnasysFile():
    """Object for holding all data in a file generated by Analysis Studio"""
    def __init__(self, src_file):
        self.height_maps = {}
        self.rendered_spectra = {}
        todo("open file")
        todo("unzip if necessary")
        todo("convert to python object")
    def read(self):
        todo()
    def unzip(self):
        todo()

class HeightMap():
    """Object for holding height map data"""
    def __init__(self):
        self.position = {
                        'X': 0,
                        'Y': 0,
                        'Z': 0
                        }




def get_extension(f_path):
    """Returns the extension of a file, given the file path"""
    ext = os.path.splitext(f_path)[1][1:].lower()
    return ext

def check_path(f_path):
    """Checks for errors with file existance and type"""
    todo("Throw an error and exit for two edge cases")
    if not os.path.isfile(f_path):
        print("Error: File path does not exist")
        todo("Throw an error and exit")
    if not (f_path.lower().endswith(".axz") or f_path.lower().endswith(".axd")):
        print("Error: File type must be .axz or .axd")
        todo("Throw an error and exit")

def read(f_name):
    """Main function for reading in data from axz or axd files"""
    #get complete file path
    f_path = os.path.abspath(f_name)
    #check that file is kosher
    check_path(f_path)
    #get the file extension
    ext = get_extension(f_path)
    #get the file data from axz or axd
    if ext == 'axz':
        f_data = open_axz(f_path)
    else:
        f_data = open_axd(f_path)
    todo("pickup here")

def open_axd(f_path):
    """Opens an axd file and returns its content"""
    todo("strip out unnecessary blank lines (may not be critical, depending on Etree reqs)")
    with open(f_path) as f:
        f_data = f.read()
    return f_data

def open_axz(f_path):
    """Opens an axz file and returns its content"""
    with gzip.open(f_path) as f:
        f_data = f.read().decode("utf-16")
    return f_data

def test_func():
    todo("fix encoding header in output file (says utf-16, but it's utf-8)")
    with gzip.open('Test Data/EmptyIRDoc.axz', 'rb') as myfile:
        data=myfile.read().decode("utf-16")
        print(data)
        with open("Test Data/newfile.xml", 'w', newline="") as f:
            f.write(data)

def load_file():
    """Opens the 'Open' file dialogue box"""
    f_names = tk.filedialog.askopenfilename( filetypes=( ("Anasys", "*.axz; *.axd"), ("All files", "*.*") ), multiple=True )
    if f_names:
        for f in f_names:
            todo("load file")


# def deleteme():
#     print(sys.path[0])
#     print(__name__)

def todo(message="Do something!"):
    """For debug only- creates console notes with line numbers"""
    def get_line_number():
        return inspect.currentframe().f_back.f_back.f_lineno
    def get_calling_function_name():
        return inspect.getframeinfo(inspect.currentframe().f_back.f_back).function
    if debug:
        complete_message = "TODO ({:4d}): {:.15}() - {}".format(get_line_number(), get_calling_function_name(), message)
        print(complete_message)
        with open("messages.txt", "w") as f1:
            f1.write(complete_message)
    else:
        pass

def main():
    # test_func()
    # deleteme()
    # read('Test Data/EmptyIRDoc.axz')
    read('Test Data/TappingModeimage.axd')

if __name__ == '__main__':
    # import argparse
    main()
